<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AmazedService</name>
    </assembly>
    <members>
        <member name="T:AmazedService.BackgroundWorker.BaseBackgroundService">
            <summary>
            后台服务基类
            </summary>
        </member>
        <member name="M:AmazedService.BackgroundWorker.BaseBackgroundService.#ctor(System.Func{AmazedService.BackgroundWorker.ServiceStartupParam},Microsoft.Extensions.Logging.ILogger{AmazedService.BackgroundWorker.BaseBackgroundService})">
            <summary>
            构造函数
            </summary>
            <param name="func">服务启动参数</param>
            <param name="logger">日志</param>
        </member>
        <member name="M:AmazedService.BackgroundWorker.BaseBackgroundService.Dispose">
            <summary>
            销毁
            </summary>
        </member>
        <member name="M:AmazedService.BackgroundWorker.BaseBackgroundService.Execute(System.Object)">
            <summary>
            执行耗时任务
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:AmazedService.BackgroundWorker.BaseBackgroundService.StartAsync(System.Threading.CancellationToken)">
            <summary>
            启动任务
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:AmazedService.BackgroundWorker.BaseBackgroundService.StopAsync(System.Threading.CancellationToken)">
            <summary>
            结束任务
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:AmazedService.BackgroundWorker.BaseBackgroundService.ExecuteAsync">
            <summary>
            耗时任务
            </summary>
            <returns></returns>
        </member>
        <member name="T:AmazedService.BackgroundWorker.ServiceStartupParam">
            <summary>
            服务启动参数
            </summary>
        </member>
        <member name="P:AmazedService.BackgroundWorker.ServiceStartupParam.StartNow">
            <summary>
            是否立即启动；是，则只有Interval参数有效，StartTime和EndTime无效；否，则必须设置StartTime
            </summary>
        </member>
        <member name="P:AmazedService.BackgroundWorker.ServiceStartupParam.Interval">
            <summary>
            间隔，单位毫秒；默认值为0，表示上一次任务执行完毕后会间隔多久执行下一次任务
            </summary>
        </member>
        <member name="P:AmazedService.BackgroundWorker.ServiceStartupParam.StartTime">
            <summary>
            启动时间 (只包含时分秒不包括日期)
            说明：
            如果启动时间不为空，则表示程序会在当天的启动时间之后执行
            </summary>
        </member>
        <member name="P:AmazedService.BackgroundWorker.ServiceStartupParam.EndTime">
            <summary>
            结束时间
            说明：
            如果结束时间不为空，则表示程序会在当天的启动时间之前后执行
            </summary>
        </member>
        <member name="T:AmazedService.FtpOperationUtil.FtpOperation">
            <summary>
            ftp操作类
            </summary>
        </member>
        <member name="M:AmazedService.FtpOperationUtil.FtpOperation.GetFtpDirectories(AmazedService.FtpOperationUtil.FtpStratupParam,System.String)">
            <summary>
            递归获取根路径下的所有的文件夹
            </summary>
            <param name="param">启动参数</param>
            <param name="path">根路径</param>
            <returns></returns>
        </member>
        <member name="M:AmazedService.FtpOperationUtil.FtpOperation.GetFtpFiles(AmazedService.FtpOperationUtil.FtpStratupParam,System.String)">
            <summary>
            递归获取根路径下的所有的文件(不包括目录)
            </summary>
            <param name="param">启动参数</param>
            <param name="path">根路径</param>
            <returns></returns>
        </member>
        <member name="M:AmazedService.FtpOperationUtil.FtpOperation.GetFtpListItems(AmazedService.FtpOperationUtil.FtpStratupParam,System.String)">
            <summary>
            递归获取根路径下的所有的文件(包括目录)
            </summary>
            <param name="param">启动参数</param>
            <param name="path">根路径</param>
            <returns></returns>
        </member>
        <member name="T:AmazedService.FtpOperationUtil.FtpStratupParam">
            <summary>
            ftp启动参数
            </summary>
        </member>
        <member name="P:AmazedService.FtpOperationUtil.FtpStratupParam.Host">
            <summary>
            主机地址
            </summary>
        </member>
        <member name="P:AmazedService.FtpOperationUtil.FtpStratupParam.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:AmazedService.FtpOperationUtil.FtpStratupParam.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="T:AmazedService.IdPoolService.IdPool">
            <summary>
            Id池
            </summary>
        </member>
        <member name="F:AmazedService.IdPoolService.IdPool.ObjectLock">
            <summary>
            对象锁
            </summary>
        </member>
        <member name="P:AmazedService.IdPoolService.IdPool.Seed">
            <summary>
            触发补充Id池的种子；当Id池中id的数量小于 IdPoolSize * Seed 时，触发补充Id操作
            </summary>
        </member>
        <member name="P:AmazedService.IdPoolService.IdPool.IdPoolSize">
            <summary>
            Id池大小
            </summary>
        </member>
        <member name="F:AmazedService.IdPoolService.IdPool.Ids">
            <summary>
            id队列
            </summary>
        </member>
        <member name="F:AmazedService.IdPoolService.IdPool.IsGenerateIds">
            <summary>
            是否正在生成id
            </summary>
        </member>
        <member name="M:AmazedService.IdPoolService.IdPool.GainId(System.Func{System.Collections.Generic.List{System.Int64}})">
            <summary>
            获取id池的第一个id，当id池不足时，通过匿名委托函数获取新生成的ID，补充Id池
            </summary>
            <param name="gainIdsFunc">当Id池中的Id数量不够，执行该匿名委托，该匿名委托用于生成id，补充id池的id数量</param>
            <returns></returns>
        </member>
        <member name="M:AmazedService.IdPoolService.IdPool.EnterIdsQueue(System.Func{System.Collections.Generic.List{System.Int64}})">
            <summary>
            入队
            </summary>
            <param name="gainIdsFunc">当Id池中的Id数量不够，执行该匿名委托，该匿名委托用于生成id，补充id池的id数量</param>
        </member>
        <member name="T:AmazedAlgorithm.DirectoryOperationUtil.DirectoryOperation">
            <summary>
            目录操作
            </summary>
        </member>
        <member name="M:AmazedAlgorithm.DirectoryOperationUtil.DirectoryOperation.ReadDirectories(System.String)">
            <summary>
            获取文件夹路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:AmazedAlgorithm.DirectoryOperationUtil.DirectoryOperation.ReadDirectories(System.String,System.Nullable{System.Int32})">
            <summary>
            获取文件夹路径
            </summary>
            <param name="path">根目录</param>
            <param name="deep">递归深度；当为null时或小于等于0时，不递归目录</param>
            <returns></returns>
        </member>
        <member name="M:AmazedAlgorithm.DirectoryOperationUtil.DirectoryOperation.GetDirectories(System.Collections.Generic.IList{System.String},System.Nullable{System.Int32})">
            <summary>
            获取文件夹路径
            </summary>
            <param name="directoryPaths">目录路径</param>
            <param name="deep">递归深度；当为null时或小于等于0时，不递归目录</param>
            <returns></returns>
        </member>
        <member name="M:AmazedAlgorithm.DirectoryOperationUtil.DirectoryOperation.ReadDirectories(System.String,System.Func{System.String,System.Boolean})">
            <summary>
            获取文件夹路径
            </summary>
            <param name="path">根目录</param>
            <param name="predicate">过滤条件</param>
            <returns></returns>
        </member>
        <member name="M:AmazedAlgorithm.DirectoryOperationUtil.DirectoryOperation.ReadDirectories(System.String,System.Int32,System.Func{System.String,System.Boolean})">
            <summary>
            获取文件夹路径
            </summary>
            <param name="path">根目录</param>
            <param name="deep">递归深度；当为null时或小于等于0时，不递归目录</param>
            <param name="predicate">过滤条件</param>
            <returns></returns>
        </member>
    </members>
</doc>
