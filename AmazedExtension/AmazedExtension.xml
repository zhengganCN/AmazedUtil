<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AmazedExtension</name>
    </assembly>
    <members>
        <member name="T:AmazedExtension.EnumExtension">
            <summary>
            枚举扩展类
            </summary>
        </member>
        <member name="M:AmazedExtension.EnumExtension.GetDescription(System.Enum)">
            <summary>
            获取枚举描述
            </summary>
            <param name="value">枚举值</param>
            <returns></returns>
        </member>
        <member name="M:AmazedExtension.EnumHelper.GetEnumList(System.Type)">
            <summary>
            获取枚举列表
            </summary>
            <param name="enumType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="T:AmazedExtension.EnumModel">
            <summary>
            枚举模型
            </summary>
        </member>
        <member name="P:AmazedExtension.EnumModel.EnumKey">
            <summary>
            枚举Key
            </summary>
        </member>
        <member name="P:AmazedExtension.EnumModel.EnumValue">
            <summary>
            枚举值
            </summary>
        </member>
        <member name="P:AmazedExtension.EnumModel.EnumDescription">
            <summary>
            枚举描述
            </summary>
        </member>
        <member name="T:AmazedExtension.ExpressionExtension">
            <summary>
            表达式树扩展
            </summary>
        </member>
        <member name="M:AmazedExtension.ExpressionExtension.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            且操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AmazedExtension.ExpressionExtension.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            或操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:AmazedExtension.RebuildExpression">
            <summary>
            重建表达式树（替换表达式参数）
            </summary>
        </member>
        <member name="M:AmazedExtension.RebuildExpression.#ctor(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            构造函数
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:AmazedExtension.RebuildExpression.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            重写
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
    </members>
</doc>
