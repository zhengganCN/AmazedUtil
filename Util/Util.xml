<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Util</name>
    </assembly>
    <members>
        <member name="T:Util.Configuration.JsonConfiguration">
            <summary>
            Json配置文件操作类
            </summary>
        </member>
        <member name="M:Util.Configuration.JsonConfiguration.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="configFilePath">配置文件路径</param>
        </member>
        <member name="M:Util.Configuration.JsonConfiguration.GetValue(System.String)">
            <summary>
            获取值，如果在json文件中没有key，则放回空字符串
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Util.Configuration.JsonConfiguration.GetObject``1">
            <summary>
            把整个json文件转换成实例对象
            </summary>
            <typeparam name="T">json文件实例化后的类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Util.Configuration.JsonConfiguration.SetValue(System.String,System.String)">
            <summary>
            根据key设置value
            无效方法，暂未实现
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Util.Configuration.JsonConfiguration.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:Util.Data.Repository.EFRepository.Repository`1">
            <summary>
            仓储基类
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.#ctor(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            构造函数，初始化上下文
            </summary>
            <param name="context">SQLServer数据库上下文</param>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.GetEntity(Util.Data.UOW.EFUOW.UnitOfWork)">
            <summary>
            获取实体
            </summary>
            <param name="uow">SQLServer工作单元</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            统计
            </summary>
            <param name="condition">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            异步统计
            </summary>
            <param name="condition">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.Delete(`0)">
            <summary>
            删除一条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.Delete(System.Collections.Generic.IList{`0})">
            <summary>
            删除多条实体
            </summary>
            <param name="entities">实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.DeleteAsync(`0)">
            <summary>
            异步删除一条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.DeleteAsync(System.Collections.Generic.IList{`0})">
            <summary>
            异步删除多条实体
            </summary>
            <param name="entities">实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Util.Data.Repository.SortMode,System.Int32,System.Int32)">
            <summary>
            异步查询多条实体
            </summary>
            <param name="condition">条件表达式</param>
            <param name="keySelector">排序关键字（根据某个关键字排序）</param>
            <param name="sortMode">排序方式，默认顺序</param>
            <param name="pageIndex">页面索引</param>
            <param name="pageSize">页面大小</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.FindAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Util.Data.Repository.SortMode,System.Int32,System.Int32)">
            <summary>
            异步查询多条实体
            </summary>
            <param name="condition">条件表达式</param>
            <param name="keySelector">排序关键字（根据某个关键字排序）</param>
            <param name="sortMode">排序方式，默认顺序</param>
            <param name="pageIndex">页面索引</param>
            <param name="pageSize">页面大小</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Util.Data.Repository.SortMode)">
            <summary>
            查询所有的实体
            </summary>
            <param name="condition">条件表达式</param>
            <param name="keySelector">排序关键字（根据某个关键字排序）</param>
            <param name="sortMode">排序方式，默认顺序</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.FindAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Util.Data.Repository.SortMode)">
            <summary>
            异步查询所有的实体
            </summary>
            <param name="condition">条件表达式</param>
            <param name="keySelector">排序关键字（根据某个关键字排序）</param>
            <param name="sortMode">排序方式，默认顺序</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.Insert(`0)">
            <summary>
            插入一条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.Insert(System.Collections.Generic.IList{`0})">
            <summary>
            插入多条实体
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.InsertAsync(`0)">
            <summary>
            异步插入一条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.InsertAsync(System.Collections.Generic.IList{`0})">
            <summary>
            异步插入多条实体
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.MarkDelete(`0)">
            <summary>
            修改一条实体的删除标识，改为true
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.MarkDelete(System.Collections.Generic.IList{`0})">
            <summary>
            修改多条实体的删除标识，改为true
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.MarkDeleteAsync(`0)">
            <summary>
            异步修改一条实体的删除标识，改为true
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.MarkDeleteAsync(System.Collections.Generic.IList{`0})">
            <summary>
            异步修改多条实体的删除标识，改为true
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.UnmarkDelete(`0)">
            <summary>
            修改一条实体的删除标识，改为false
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.UnmarkDelete(System.Collections.Generic.IList{`0})">
            <summary>
            修改多条实体的删除标识，改为false
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.UnmarkDeleteAsync(`0)">
            <summary>
            异步修改一条实体的删除标识，改为false
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.UnmarkDeleteAsync(System.Collections.Generic.IList{`0})">
            <summary>
            异步修改多条实体的删除标识，改为false
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.Update(`0)">
            <summary>
            更新一条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.Update(System.Collections.Generic.IList{`0})">
            <summary>
            更新多条实体
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.UpdateAsync(`0)">
            <summary>
            异步更新一条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.EFRepository.Repository`1.UpdateAsync(System.Collections.Generic.IList{`0})">
            <summary>
            异步更新多条实体
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="T:Util.Data.Repository.Entity`1">
            <summary>
            实体基类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Util.Data.Repository.Entity`1.Id">
            <summary>
            泛型主键
            </summary>
        </member>
        <member name="P:Util.Data.Repository.Entity`1.IsDeleted">
            <summary>
            删除标识
            </summary>
        </member>
        <member name="P:Util.Data.Repository.Entity`1.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Util.Data.Repository.Entity`1.DeleteTime">
            <summary>
            删除时间
            </summary>
        </member>
        <member name="P:Util.Data.Repository.Entity`1.UpdateTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="T:Util.Data.Repository.MongoDBRepository.Repository`1">
            <summary>
            仓储基类
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.#ctor(Util.Data.UOW.MongoDBUOW.DbContext)">
            <summary>
            构造函数，初始化上下文
            </summary>
            <param name="context">mongodb上下文</param>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.GetMongoCollection``1(Util.Data.UOW.MongoDBUOW.UnitOfWork)">
            <summary>
            获取mongodb的集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="uow">mongodb工作单元</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            异步统计
            </summary>
            <param name="condition">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            异步统计
            </summary>
            <param name="condition">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.Delete(`0)">
            <summary>
            删除一条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.Delete(System.Collections.Generic.IList{`0})">
            <summary>
            删除多条实体
            </summary>
            <param name="entities">实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.DeleteAsync(`0)">
            <summary>
            异步删除一条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.DeleteAsync(System.Collections.Generic.IList{`0})">
            <summary>
            异步删除多条实体
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Util.Data.Repository.SortMode,System.Int32,System.Int32)">
            <summary>
            查询多条实体
            </summary>
            <param name="condition">条件表达式条件</param>
            <param name="keySelector">排序关键字（根据某个关键字排序）</param>
            <param name="sortMode">顺序/倒序（默认顺序）</param>
            <param name="pageIndex">索引页数</param>
            <param name="pageSize">索引页大小</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.FindAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Util.Data.Repository.SortMode,System.Int32,System.Int32)">
            <summary>
            异步查询多条实体
            </summary>
            <param name="condition">条件表达式</param>
            <param name="keySelector">排序关键字（根据某个关键字排序）</param>
            <param name="sortMode">排序方式，默认顺序</param>
            <param name="pageIndex">页面索引</param>
            <param name="pageSize">页面大小</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Util.Data.Repository.SortMode)">
            <summary>
            查询所有的实体
            </summary>
            <param name="condition">条件表达式</param>
            <param name="keySelector">排序关键字（根据某个关键字排序）</param>
            <param name="sortMode">排序方式，默认顺序</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.FindAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Util.Data.Repository.SortMode)">
            <summary>
            异步查询所有的实体
            </summary>
            <param name="condition">条件表达式</param>
            <param name="keySelector">排序关键字（根据某个关键字排序）</param>
            <param name="sortMode">排序方式，默认顺序</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.Insert(`0)">
            <summary>
            插入一条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.Insert(System.Collections.Generic.IList{`0})">
            <summary>
            插入多条实体
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.InsertAsync(`0)">
            <summary>
            异步插入一条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.InsertAsync(System.Collections.Generic.IList{`0})">
            <summary>
            异步插入多条实体
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.MarkDelete(`0)">
            <summary>
            修改一条实体的删除标识，改为true
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.MarkDelete(System.Collections.Generic.IList{`0})">
            <summary>
            修改多条实体的删除标识，改为true
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.MarkDeleteAsync(`0)">
            <summary>
            异步修改一条实体的删除标识，改为true
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.MarkDeleteAsync(System.Collections.Generic.IList{`0})">
            <summary>
            异步修改多条实体的删除标识，改为true
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.UnmarkDelete(`0)">
            <summary>
            修改一条实体的删除标识，改为false
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.UnmarkDelete(System.Collections.Generic.IList{`0})">
            <summary>
            修改多条实体的删除标识，改为false
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.UnmarkDeleteAsync(`0)">
            <summary>
            异步修改一条实体的删除标识，改为false
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.UnmarkDeleteAsync(System.Collections.Generic.IList{`0})">
            <summary>
            异步修改多条实体的删除标识，改为false
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.Update(`0)">
            <summary>
            更新单条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.Update(System.Collections.Generic.IList{`0})">
            <summary>
            更新多条实体
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.UpdateAsync(`0)">
            <summary>
            异步更新单条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Util.Data.Repository.MongoDBRepository.Repository`1.UpdateAsync(System.Collections.Generic.IList{`0})">
            <summary>
            异步更新多条实体
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="T:Util.Data.Repository.SortMode">
            <summary>
            排序方式
            </summary>
        </member>
        <member name="F:Util.Data.Repository.SortMode.Ascending">
            <summary>
            升序
            </summary>
        </member>
        <member name="F:Util.Data.Repository.SortMode.Descending">
            <summary>
            降序
            </summary>
        </member>
        <member name="T:Util.Data.UOW.EFUOW.UnitOfWork">
            <summary>
            工作单元
            </summary>
        </member>
        <member name="M:Util.Data.UOW.EFUOW.UnitOfWork.#ctor(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            工作单元构造函数
            </summary>
            <param name="context">sqlserver数据库上下文</param>
        </member>
        <member name="P:Util.Data.UOW.EFUOW.UnitOfWork.DbContext">
            <summary>
            sqlserver数据库上下文
            </summary>
        </member>
        <member name="M:Util.Data.UOW.EFUOW.UnitOfWork.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:Util.Data.UOW.EFUOW.UnitOfWork.Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:Util.Data.UOW.EFUOW.UnitOfWork.Transaction">
            <summary>
            事务开始
            </summary>
        </member>
        <member name="M:Util.Data.UOW.MongoDBUOW.DbContext.MongoClientConfiguration">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Util.Data.UOW.MongoDBUOW.DbContext.MongoDatabaseConfiguration">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Util.Data.UOW.MongoDBUOW.UnitOfWork">
            <summary>
            
            </summary>
        </member>
        <member name="M:Util.Data.UOW.MongoDBUOW.UnitOfWork.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Util.Data.UOW.MongoDBUOW.UnitOfWork.Rollback">
            <summary>
            释放与事务有关的资源
            </summary>
        </member>
        <member name="M:Util.Data.UOW.MongoDBUOW.UnitOfWork.Transaction">
            <summary>
            
            </summary>
        </member>
        <member name="T:Util.Extend.EnumExtend">
            <summary>
            枚举扩展类
            </summary>
        </member>
        <member name="M:Util.Extend.EnumExtend.GetDescription(System.Enum)">
            <summary>
            获取枚举描述
            </summary>
            <param name="value">枚举值</param>
            <returns></returns>
        </member>
        <member name="T:Util.Math.MathException.RandomRangeException">
            <summary>
            随机数范围异常
            </summary>
        </member>
        <member name="T:Util.Math.RandomNumber">
            <summary>
            随机数
            </summary>
        </member>
        <member name="M:Util.Math.RandomNumber.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Util.Math.RandomNumber.GenerateRandom(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            生成整型随机数
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="isContainerMinValue"></param>
            <param name="isContainerMaxValue"></param>
            <returns></returns>
        </member>
        <member name="M:Util.Math.RandomNumber.CheckRandomRange(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            验证minValue和maxValue的取值范围是否符合规范
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="isContainerMinValue"></param>
            <param name="isContainerMaxValue"></param>
        </member>
        <member name="M:Util.Math.RandomNumber.RandomRangeExceptionInfoFormat(System.Int32,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>
            格式化异常信息
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="isContainerMinValue"></param>
            <param name="isContainerMaxValue"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:Util.Math.RandomNumber.GenerateRandom(System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            随机生成双精度浮点数
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="isContainerMinValue"></param>
            <param name="isContainerMaxValue"></param>
            <returns></returns>
        </member>
        <member name="M:Util.Math.RandomNumber.CheckRandomRange(System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            验证minValue和maxValue的取值范围是否符合规范
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="isContainerMinValue"></param>
            <param name="isContainerMaxValue"></param>
        </member>
        <member name="M:Util.Math.RandomNumber.RandomRangeExceptionInfoFormat(System.Double,System.Double,System.Boolean,System.Boolean,System.String)">
            <summary>
            格式化异常信息
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="isContainerMinValue"></param>
            <param name="isContainerMaxValue"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="T:Util.ModelResult.ModelResult`1">
            <summary>
            返回的视图模型以及结果信息
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Util.ModelResult.ModelResult`1.Data">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="P:Util.ModelResult.ModelResult`1.Pagination">
            <summary>
            分页信息
            </summary>
        </member>
        <member name="P:Util.ModelResult.ModelResult`1.Message">
            <summary>
            提示信息
            </summary>
        </member>
        <member name="P:Util.ModelResult.ModelResult`1.ErrorInfo">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Util.ModelResult.ModelResult`1.Code">
            <summary>
            成功/错误代码
            </summary>
        </member>
        <member name="P:Util.ModelResult.ModelResult`1.Success">
            <summary>
            成功标识,操作执行是否成功
            </summary>
        </member>
        <member name="M:Util.ModelResult.ModelResult`1.SuccessResult(`0,System.Enum,Util.ModelResult.Pagination)">
            <summary>
            返回成功时调用
            </summary>
            <param name="data">数据</param>
            <param name="code">成功代码</param>
            <param name="pagination">分页信息</param>
            <returns></returns>
        </member>
        <member name="M:Util.ModelResult.ModelResult`1.FailedResult(System.Enum,System.String)">
            <summary>
            返回失败时调用
            </summary>
            <param name="code">错误代码</param>
            <param name="errorInfo">错误信息</param>
            <returns></returns>
        </member>
        <member name="T:Util.ModelResult.Pagination">
            <summary>
            分页
            </summary>
        </member>
        <member name="M:Util.ModelResult.Pagination.#ctor(System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="pageIndex">页面索引，默认为1</param>
            <param name="pageSize">页面大小，默认为10</param>
        </member>
        <member name="P:Util.ModelResult.Pagination.PageIndex">
            <summary>
            页面索引
            </summary>
        </member>
        <member name="P:Util.ModelResult.Pagination.PageSize">
            <summary>
            页面大小
            </summary>
        </member>
        <member name="P:Util.ModelResult.Pagination.Count">
            <summary>
            项总数
            </summary>
        </member>
        <member name="P:Util.ModelResult.Pagination.PageCount">
            <summary>
            页面总数
            </summary>
        </member>
        <member name="T:Util.Security.Cryptography.AES">
            <summary>
            对称加密算法，算法支持的密钥长度为128、192、256位。IV长度位128位
            </summary>
        </member>
        <member name="M:Util.Security.Cryptography.AES.AESEncrypt(System.Byte[],System.Byte[],Util.Security.Cryptography.AES.KeyType)">
            <summary>
            AES加密算法
            </summary>
            <param name="data">需加密的数据</param>
            <param name="key">密钥</param>
            <param name="keyType">密钥长度</param>
            <returns></returns>
        </member>
        <member name="M:Util.Security.Cryptography.AES.AESDecrypt(System.Byte[],System.Byte[],Util.Security.Cryptography.AES.KeyType)">
            <summary>
            AES解密算法
            </summary>
            <param name="data">需解密的数据</param>
            <param name="key">密钥</param>
            <param name="keyType">密钥长度</param>
            <returns></returns>
        </member>
        <member name="T:Util.Security.Cryptography.AES.KeyType">
            <summary>
            密钥长度
            </summary>
        </member>
        <member name="F:Util.Security.Cryptography.AES.KeyType.Key128">
            <summary>
            密钥长度为128
            </summary>
        </member>
        <member name="F:Util.Security.Cryptography.AES.KeyType.Key192">
            <summary>
            密钥长度为192
            </summary>
        </member>
        <member name="F:Util.Security.Cryptography.AES.KeyType.Key256">
            <summary>
            密钥长度为256
            </summary>
        </member>
        <member name="T:Util.Security.Cryptography.DES">
            <summary>
            对称加密算法，算法支持的密钥长度为64位。
            </summary>
        </member>
        <member name="M:Util.Security.Cryptography.DES.DESEncrypt(System.Byte[],System.Byte[])">
            <summary>
            DES加密
            </summary>
            <param name="data">需加密的数据</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Util.Security.Cryptography.DES.DESDecrypt(System.Byte[],System.Byte[])">
            <summary>
            DES解密
            </summary>
            <param name="data">需解密的数据</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Util.Security.Cryptography.DES.GetKey(System.Byte[])">
            <summary>
            获取密钥
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Util.Security.Cryptography.MD5">
            <summary>
            hash算法，MD5
            </summary>
        </member>
        <member name="M:Util.Security.Cryptography.MD5.Encrypt(System.Byte[])">
            <summary>
            MD5加密
            </summary>
            <param name="data">需加密的数据</param>
            <returns>16进制字符串</returns>
        </member>
        <member name="T:Util.Security.Cryptography.RSA">
            <summary>
            RSA加密/解密,非对称算法
            </summary>
        </member>
        <member name="T:Util.Security.Cryptography.SHA">
            <summary>
            hash算法
            </summary>
        </member>
        <member name="M:Util.Security.Cryptography.SHA.SHA1Encrypt(System.Byte[])">
            <summary>
            SHA1加密
            </summary>
            <param name="data">需加密的数据</param>
            <returns>16进制字符串</returns>
        </member>
        <member name="M:Util.Security.Cryptography.SHA.SHA256Encrypt(System.Byte[])">
            <summary>
            SHA256加密
            </summary>
            <param name="data">需加密的数据</param>
            <returns>16进制字符串</returns>
        </member>
        <member name="M:Util.Security.Cryptography.SHA.SHA384Encrypt(System.Byte[])">
            <summary>
            SHA384加密
            </summary>
            <param name="data">需加密的数据</param>
            <returns>16进制字符串</returns>
        </member>
        <member name="M:Util.Security.Cryptography.SHA.SHA512Encrypt(System.Byte[])">
            <summary>
            SHA512加密
            </summary>
            <param name="data">需加密的数据</param>
            <returns>16进制字符串</returns>
        </member>
    </members>
</doc>
