<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AmazedDataContext</name>
    </assembly>
    <members>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.InsertOne(`0)">
            <summary>
            插入一条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.InsertMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量插入实体集
            </summary>
            <param name="entities">实体集</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.InsertOneAsync(`0)">
            <summary>
            异步插入一条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.InsertManyAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            异步批量插入实体集
            </summary>
            <param name="entities">实体集</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.UpdateOne(`0)">
            <summary>
            更新所有字段，根据实体的Id更新实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.UpdateMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量更新所有字段，根据每条实体的Id更新每条实体
            </summary>
            <param name="entities">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.UpdateMany(System.Collections.Generic.IEnumerable{`0},System.Object)">
            <summary>
            批量更新指定字段，根据每条实体的Id更新每条实体
            </summary>
            <param name="entities">实体列表</param>
            <param name="updateFields">更新字段的匿名对象</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.UpdateMany(`0,System.Object,System.String)">
            <summary>
            批量更新符合条件的实体的指定字段
            </summary>
            <param name="entity">实体</param>
            <param name="updateFields">更新字段的匿名对象</param>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.UpdateOneAsync(`0)">
            <summary>
            异步更新所有字段，根据实体的Id更新实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.UpdateManyAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            异步批量更新所有字段，根据每条实体的Id更新每条实体
            </summary>
            <param name="entities">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.UpdateManyAsync(System.Collections.Generic.IEnumerable{`0},System.Object)">
            <summary>
            异步批量更新指定字段，根据每条实体的Id更新每条实体
            </summary>
            <param name="entities">实体列表</param>
            <param name="updateFields">更新字段的匿名对象</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.UpdateManyAsync(`0,System.Object,System.String)">
            <summary>
            异步批量更新符合条件的实体的指定字段
            </summary>
            <param name="entity">实体</param>
            <param name="updateFields">更新字段的匿名对象</param>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.FindOne(System.String)">
            <summary>
            根据条件查询返回一条符合的数据
            </summary>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.FindMany(System.String,System.Int32,System.Int32,System.String,AmazedDataContext.EnumSequence)">
            <summary>
            查询所有符合条件的实体，并根据分页条件返回限定数量的数据
            </summary>
            <param name="conditionString">条件字符串</param>
            <param name="sequenceField">排序字段</param>
            <param name="sequence">排序方式</param>
            <param name="pageInde">分页索引</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.FindAll">
            <summary>
            查询所有实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.FindAll(System.String)">
            <summary>
            查询所有符合条件的实体
            </summary>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.FindOneAsync(System.String)">
            <summary>
            根据条件异步查询返回一条符合的数据
            </summary>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.FindManyAsync(System.String,System.Int32,System.Int32,System.String,AmazedDataContext.EnumSequence)">
            <summary>
            异步查询所有符合条件的实体，并根据分页条件返回限定数量的数据
            </summary>
            <param name="conditionString">条件字符串</param>
            <param name="sequenceField">排序字段</param>
            <param name="sequence">排序方式</param>
            <param name="pageInde">分页索引</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.FindAllAsync">
            <summary>
            异步查询所有实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.FindAllAsync(System.String)">
            <summary>
            异步查询所有符合条件的实体
            </summary>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.DeleteOne(`0)">
            <summary>
            删除实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.DeleteMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量删除实体
            </summary>
            <param name="entities">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.DeleteMany(System.String)">
            <summary>
            根据条件删除实体
            </summary>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.DeleteOneAsync(`0)">
            <summary>
            异步删除实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.DeleteManyAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            异步批量删除实体
            </summary>
            <param name="entities">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.DeleteManyAsync(System.String)">
            <summary>
            根据条件异步删除实体
            </summary>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.MarkDeleteOne(`0)">
            <summary>
            更新删除标记为已删除
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.MarkDeleteMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量更新删除标记为已删除
            </summary>
            <param name="entities">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.MarkDeleteMany(System.String)">
            <summary>
            根据条件更新删除标记为已删除
            </summary>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.MarkDeleteOneAsync(`0)">
            <summary>
            异步更新删除标记为已删除
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.MarkDeleteManyAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            异步批量更新删除标记为已删除
            </summary>
            <param name="entities">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.MarkDeleteManyAsync(System.String)">
            <summary>
            根据条件异步更新删除标记为已删除
            </summary>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.MarkUnDeleteOne(`0)">
            <summary>
            更新删除标记为未删除
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.MarkUnDeleteMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量更新删除标记为未删除
            </summary>
            <param name="entities">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.MarkUnDeleteMany(System.String)">
            <summary>
            根据条件更新删除标记为未删除
            </summary>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.MarkUnDeleteOneAsync(`0)">
            <summary>
            异步更新删除标记为未删除
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.MarkUnDeleteManyAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            异步批量更新删除标记为未删除
            </summary>
            <param name="entities">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.MarkUnDeleteManyAsync(System.String)">
            <summary>
            根据条件异步更新删除标记为未删除
            </summary>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.Count(System.String)">
            <summary>
            统计符合条件的实体
            </summary>
            <param name="conditionString"></param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Interface.IRepository`1.CountAsync(System.String)">
            <summary>
            异步统计符合条件的实体
            </summary>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="T:AmazedDataContext.Dapper.SQLString.ISQLString">
            <summary>
            SQL增、删、改、查语句帮助接口
            </summary>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.ISQLString.InsertSQLString``1(``0)">
            <summary>
            插入SQL语句
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.ISQLString.UpdateSQLString``1(``0)">
            <summary>
            更新SQL语句
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.ISQLString.UpdateSQLString``1(System.Object)">
            <summary>
            更新SQL语句
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="updateFields">更新字段的匿名对象</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.ISQLString.UpdateSQLString``1(System.Object,System.String)">
            <summary>
            更新SQL语句
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="updateFields">更新字段的匿名对象</param>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.ISQLString.DeleteSQLString``1">
            <summary>
            删除SQL语句
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.ISQLString.DeleteSQLString``1(System.String)">
            <summary>
            删除SQL语句
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.ISQLString.QuerySQLString``1">
            <summary>
            查询SQL语句
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.ISQLString.QuerySQLString``1(System.String)">
            <summary>
            查询SQL语句
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.ISQLString.QuerySQLString``1(System.String,System.String,AmazedDataContext.EnumSequence,System.Int32,System.Int32)">
            <summary>
            查询SQL语句
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="conditionString">条件字符串</param>
            <param name="SequnceField">排序字段</param>
            <param name="sequence">排序方式</param>
            <param name="pageIndex">分页索引</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.ISQLString.MarkDeleteSQLString``1">
            <summary>
            更新某条记录的删除标记为已删除
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.ISQLString.MarkDeleteSQLString``1(System.String)">
            <summary>
            根据条件更新删除标记为已删除
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.ISQLString.MarkUnDeleteSQLString``1">
            <summary>
            更新某条记录的删除标记为未删除
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.ISQLString.MarkUnDeleteSQLString``1(System.String)">
            <summary>
            根据条件更新删除标记为未删除
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.ISQLString.CountSQLString``1">
            <summary>
            统计符合条件的实体数量
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.ISQLString.CountSQLString``1(System.String)">
            <summary>
            统计符合条件的实体数量
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="T:AmazedDataContext.Dapper.SQLString.AbstractSQLString">
            <summary>
            SQL增、删、改、查语句抽象帮助类
            </summary>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.AbstractSQLString.InsertSQLString``1(``0)">
            <summary>
            插入SQL语句
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.AbstractSQLString.UpdateSQLString``1(``0)">
            <summary>
            更新SQL语句
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.AbstractSQLString.UpdateSQLString``1(System.Object)">
            <summary>
            更新SQL语句
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="updateFields">更新字段的匿名对象</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.AbstractSQLString.UpdateSQLString``1(System.Object,System.String)">
            <summary>
            更新SQL语句
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="updateFields">更新字段的匿名对象</param>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.AbstractSQLString.DeleteSQLString``1">
            <summary>
            删除SQL语句
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.AbstractSQLString.DeleteSQLString``1(System.String)">
            <summary>
            删除SQL语句
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.AbstractSQLString.QuerySQLString``1">
            <summary>
            查询SQL语句
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.AbstractSQLString.QuerySQLString``1(System.String)">
            <summary>
            查询SQL语句
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.AbstractSQLString.QuerySQLString``1(System.String,System.String,AmazedDataContext.EnumSequence,System.Int32,System.Int32)">
            <summary>
            查询SQL语句
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="conditionString">条件字符串</param>
            <param name="SequnceField">排序字段</param>
            <param name="sequence">排序方式</param>
            <param name="pageIndex">分页索引</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.AbstractSQLString.MarkDeleteSQLString``1">
            <summary>
            更新某条记录的删除标记为已删除
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.AbstractSQLString.MarkDeleteSQLString``1(System.String)">
            <summary>
            根据条件更新删除标记为已删除
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.AbstractSQLString.MarkUnDeleteSQLString``1">
            <summary>
            更新某条记录的删除标记为未删除
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.AbstractSQLString.MarkUnDeleteSQLString``1(System.String)">
            <summary>
            根据条件更新删除标记为未删除
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.AbstractSQLString.CountSQLString``1">
            <summary>
            统计实体数量
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.AbstractSQLString.CountSQLString``1(System.String)">
            <summary>
            统计符合条件的实体数量
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="T:AmazedDataContext.Dapper.SQLString.MSSQLString">
            <summary>
            MSSQL增、删、改、查语句帮助类
            </summary>
        </member>
        <member name="M:AmazedDataContext.Dapper.SQLString.MSSQLString.QuerySQLString``1(System.String,System.String,AmazedDataContext.EnumSequence,System.Int32,System.Int32)">
            <summary>
            查询SQL语句
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="conditionString">条件字符串</param>
            <param name="SequnceField">排序字段</param>
            <param name="sequence">排序方式</param>
            <param name="pageIndex">分页索引</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="T:AmazedDataContext.Dapper.Repository.AbstractRepository`1">
            <summary>
            仓储抽象类，每种数据库的仓储仓储模式都应继承此类
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.GetSqlConnection">
            <summary>
            获取SQL连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.GetSqlString">
            <summary>
            获取SQLString帮助
            </summary>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.GetUnitOfWork">
            <summary>
            获取工作单元
            </summary>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.InsertOne(`0)">
            <summary>
            插入一条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.InsertMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量插入实体集
            </summary>
            <param name="entities">实体集</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.InsertOneAsync(`0)">
            <summary>
            异步插入一条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.InsertManyAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            异步批量插入实体集
            </summary>
            <param name="entities">实体集</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.UpdateOne(`0)">
            <summary>
            更新所有字段，根据实体的Id更新实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.UpdateMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量更新所有字段，根据每条实体的Id更新每条实体
            </summary>
            <param name="entities">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.UpdateMany(System.Collections.Generic.IEnumerable{`0},System.Object)">
            <summary>
            批量更新指定字段，根据每条实体的Id更新每条实体
            </summary>
            <param name="entities">实体列表</param>
            <param name="updateFields">更新字段的匿名对象</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.UpdateMany(`0,System.Object,System.String)">
            <summary>
            批量更新符合条件的实体的指定字段
            </summary>
            <param name="entity">实体</param>
            <param name="updateFields">更新字段的匿名对象</param>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.UpdateOneAsync(`0)">
            <summary>
            异步更新所有字段，根据实体的Id更新实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.UpdateManyAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            异步批量更新所有字段，根据每条实体的Id更新每条实体
            </summary>
            <param name="entities">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.UpdateManyAsync(System.Collections.Generic.IEnumerable{`0},System.Object)">
            <summary>
            异步批量更新指定字段，根据每条实体的Id更新每条实体
            </summary>
            <param name="entities">实体列表</param>
            <param name="updateFields">更新字段的匿名对象</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.UpdateManyAsync(`0,System.Object,System.String)">
            <summary>
            异步批量更新符合条件的实体的指定字段
            </summary>
            <param name="entity">实体</param>
            <param name="updateFields">更新字段的匿名对象</param>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.FindOne(System.String)">
            <summary>
            根据条件查询返回一条符合的数据
            </summary>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.FindMany(System.String,System.Int32,System.Int32,System.String,AmazedDataContext.EnumSequence)">
            <summary>
            查询所有符合条件的实体，并根据分页条件返回限定数量的数据
            </summary>
            <param name="conditionString">条件字符串</param>
            <param name="sequenceField">排序字段</param>
            <param name="sequence">排序方式</param>
            <param name="pageInde">分页索引</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.FindAll">
            <summary>
            查询所有实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.FindAll(System.String)">
            <summary>
            查询所有符合条件的实体
            </summary>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.FindOneAsync(System.String)">
            <summary>
            根据条件异步查询返回一条符合的数据
            </summary>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.FindManyAsync(System.String,System.Int32,System.Int32,System.String,AmazedDataContext.EnumSequence)">
            <summary>
            异步查询所有符合条件的实体，并根据分页条件返回限定数量的数据
            </summary>
            <param name="conditionString">条件字符串</param>
            <param name="sequenceField">排序字段</param>
            <param name="sequence">排序方式</param>
            <param name="pageInde">分页索引</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.FindAllAsync">
            <summary>
            异步查询所有实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.FindAllAsync(System.String)">
            <summary>
            异步查询所有符合条件的实体
            </summary>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.DeleteOne(`0)">
            <summary>
            删除实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.DeleteMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量删除实体
            </summary>
            <param name="entities">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.DeleteMany(System.String)">
            <summary>
            根据条件删除实体
            </summary>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.DeleteOneAsync(`0)">
            <summary>
            异步删除实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.DeleteManyAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            异步批量删除实体
            </summary>
            <param name="entities">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.DeleteManyAsync(System.String)">
            <summary>
            根据条件异步删除实体
            </summary>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.MarkDeleteOne(`0)">
            <summary>
            更新删除标记为已删除
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.MarkDeleteMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量更新删除标记为已删除
            </summary>
            <param name="entities">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.MarkDeleteMany(System.String)">
            <summary>
            根据条件更新删除标记为已删除
            </summary>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.MarkDeleteOneAsync(`0)">
            <summary>
            异步更新删除标记为已删除
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.MarkDeleteManyAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            异步批量更新删除标记为已删除
            </summary>
            <param name="entities">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.MarkDeleteManyAsync(System.String)">
            <summary>
            根据条件异步更新删除标记为已删除
            </summary>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.MarkUnDeleteOne(`0)">
            <summary>
            更新删除标记为未删除
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.MarkUnDeleteMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量更新删除标记为未删除
            </summary>
            <param name="entities">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.MarkUnDeleteMany(System.String)">
            <summary>
            根据条件更新删除标记为未删除
            </summary>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.MarkUnDeleteOneAsync(`0)">
            <summary>
            异步更新删除标记为未删除
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.MarkUnDeleteManyAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            异步批量更新删除标记为未删除
            </summary>
            <param name="entities">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.MarkUnDeleteManyAsync(System.String)">
            <summary>
            根据条件异步更新删除标记为未删除
            </summary>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.Count(System.String)">
            <summary>
            统计符合条件的实体
            </summary>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.AbstractRepository`1.CountAsync(System.String)">
            <summary>
            异步统计符合条件的实体
            </summary>
            <param name="conditionString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="T:AmazedDataContext.Dapper.Repository.MSSQLRepository`1">
            <summary>
            MSSQL仓储模式
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="F:AmazedDataContext.Dapper.Repository.MSSQLRepository`1._unitOfWork">
            <summary>
            工作单元
            </summary> 
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.MSSQLRepository`1.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.MSSQLRepository`1.GetSqlConnection">
            <summary>
            获取SQL连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.MSSQLRepository`1.GetSqlString">
            <summary>
            获取SQLString帮助
            </summary>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.MSSQLRepository`1.GetUnitOfWork">
            <summary>
            获取工作单元
            </summary>
            <returns></returns>
        </member>
        <member name="T:AmazedDataContext.Dapper.Repository.MySQLRepository`1">
            <summary>
            MySQL仓储模式
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="F:AmazedDataContext.Dapper.Repository.MySQLRepository`1._unitOfWork">
            <summary>
            工作单元
            </summary> 
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.MySQLRepository`1.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.MySQLRepository`1.GetSqlConnection">
            <summary>
            获取SQL连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.MySQLRepository`1.GetSqlString">
            <summary>
            获取SQLString帮助
            </summary>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Dapper.Repository.MySQLRepository`1.GetUnitOfWork">
            <summary>
            获取工作单元
            </summary>
            <returns></returns>
        </member>
        <member name="T:AmazedDataContext.Dapper.MySQLString">
            <summary>
            MySQL增、删、改、查语句帮助类
            </summary>
        </member>
        <member name="M:AmazedDataContext.Dapper.MySQLString.QuerySQLString``1(System.String,System.String,AmazedDataContext.EnumSequence,System.Int32,System.Int32)">
            <summary>
            查询SQL语句
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="conditionString">条件字符串</param>
            <param name="SequnceField">排序字段</param>
            <param name="sequence">排序方式</param>
            <param name="pageIndex">分页索引</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="T:AmazedDataContext.Dapper.UnitOfWork.UOW">
            <summary>
            工作单元
            </summary>
        </member>
        <member name="P:AmazedDataContext.Dapper.UnitOfWork.UOW.DbConnection">
            <summary>
            SQL连接
            </summary>
        </member>
        <member name="P:AmazedDataContext.Dapper.UnitOfWork.UOW.DbTransaction">
            <summary>
            事务
            </summary>
        </member>
        <member name="M:AmazedDataContext.Dapper.UnitOfWork.UOW.SetSqlConnection(System.Data.Common.DbConnection)">
            <summary>
            设置数据库连接
            </summary>
            <param name="dbConnection"></param>
        </member>
        <member name="M:AmazedDataContext.Dapper.UnitOfWork.UOW.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:AmazedDataContext.Dapper.UnitOfWork.UOW.Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:AmazedDataContext.Dapper.UnitOfWork.UOW.Transaction">
            <summary>
            创建事务
            </summary>
        </member>
        <member name="M:AmazedDataContext.Dapper.UnitOfWork.UOW.Close">
            <summary>
            手动关闭连接
            </summary>
        </member>
        <member name="T:AmazedDataContext.EFCore.Extension.ModelCommentCreating">
            <summary>
            创建模型说明
            使用：在继承DbContext的类中重写protected override void OnModelCreating(ModelBuilder modelBuilder)，并在该重写方法中调用 ModelCommentCreating 类的成员方法
            注意：如果表是一个视图（即DbSet&lt;T&gt;中的T是一个视图），则必须为DbSet&lt;T&gt;添加DbView特性，否则不能在T的属性中使用Describute特性
            </summary>
        </member>
        <member name="M:AmazedDataContext.EFCore.Extension.ModelCommentCreating.ColumnCommentCreating(Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            创建表的字段说明
            </summary>
            <param name="dbContext">数据库上下文</param>
            <param name="modelBuilder">模型构造器</param>
        </member>
        <member name="M:AmazedDataContext.EFCore.Extension.ModelCommentCreating.TableOrViewCommentCreating(Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            创建表或视图的说明
            </summary>
            <param name="dbContext">数据库上下文</param>
            <param name="modelBuilder">模型构造器</param>
        </member>
        <member name="T:AmazedDataContext.EFCore.Repository.EFRepository`1">
            <summary>
            仓储基类
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:AmazedDataContext.EFCore.Repository.EFRepository`1.UOW">
            <summary>
            工作单元
            </summary>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.#ctor(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            构造函数，初始化上下文
            </summary>
            <param name="context">SQLServer数据库上下文</param>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.GetEntity">
            <summary>
            获取实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            统计
            </summary>
            <param name="condition">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            异步统计
            </summary>
            <param name="condition">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.Delete(`0)">
            <summary>
            删除一条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.Delete(System.Collections.Generic.IList{`0})">
            <summary>
            删除多条实体
            </summary>
            <param name="entities">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.DeleteAsync(`0)">
            <summary>
            异步删除一条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.DeleteAsync(System.Collections.Generic.IList{`0})">
            <summary>
            异步删除多条实体
            </summary>
            <param name="entities">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.Find(System.Object[])">
            <summary>
            查询一条实体
            </summary>
            <param name="primaryKey">主键值</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.FindAsync(System.Object[])">
            <summary>
            异步查询一条实体
            </summary>
            <param name="primaryKey">主键值</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},AmazedDataContext.EnumSequence,System.Int32,System.Int32)">
            <summary>
            异步查询多条实体
            </summary>
            <param name="condition">条件表达式</param>
            <param name="keySelector">排序关键字（根据某个关键字排序）</param>
            <param name="sortMode">排序方式，默认顺序</param>
            <param name="pageIndex">页面索引</param>
            <param name="pageSize">页面大小</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.FindAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},AmazedDataContext.EnumSequence,System.Int32,System.Int32)">
            <summary>
            异步查询多条实体
            </summary>
            <param name="condition">条件表达式</param>
            <param name="keySelector">排序关键字（根据某个关键字排序）</param>
            <param name="sortMode">排序方式，默认顺序</param>
            <param name="pageIndex">页面索引</param>
            <param name="pageSize">页面大小</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},AmazedDataContext.EnumSequence)">
            <summary>
            查询所有的实体
            </summary>
            <param name="condition">条件表达式</param>
            <param name="keySelector">排序关键字（根据某个关键字排序）</param>
            <param name="sortMode">排序方式，默认顺序</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.FindAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},AmazedDataContext.EnumSequence)">
            <summary>
            异步查询所有的实体
            </summary>
            <param name="condition">条件表达式</param>
            <param name="keySelector">排序关键字（根据某个关键字排序）</param>
            <param name="sortMode">排序方式，默认顺序</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.Insert(`0)">
            <summary>
            插入一条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.Insert(System.Collections.Generic.IList{`0})">
            <summary>
            插入多条实体
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.InsertAsync(`0)">
            <summary>
            异步插入一条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.InsertAsync(System.Collections.Generic.IList{`0})">
            <summary>
            异步插入多条实体
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.MarkDelete(`0)">
            <summary>
            修改一条实体的删除标识，改为true
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.MarkDelete(System.Collections.Generic.IList{`0})">
            <summary>
            修改多条实体的删除标识，改为true
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.MarkDeleteAsync(`0)">
            <summary>
            异步修改一条实体的删除标识，改为true
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.MarkDeleteAsync(System.Collections.Generic.IList{`0})">
            <summary>
            异步修改多条实体的删除标识，改为true
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.UnmarkDelete(`0)">
            <summary>
            修改一条实体的删除标识，改为false
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.UnmarkDelete(System.Collections.Generic.IList{`0})">
            <summary>
            修改多条实体的删除标识，改为false
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.UnmarkDeleteAsync(`0)">
            <summary>
            异步修改一条实体的删除标识，改为false
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.UnmarkDeleteAsync(System.Collections.Generic.IList{`0})">
            <summary>
            异步修改多条实体的删除标识，改为false
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.Update(`0)">
            <summary>
            更新一条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.Update(System.Collections.Generic.IList{`0})">
            <summary>
            更新多条实体
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.UpdateAsync(`0)">
            <summary>
            异步更新一条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.EFCore.Repository.EFRepository`1.UpdateAsync(System.Collections.Generic.IList{`0})">
            <summary>
            异步更新多条实体
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="T:AmazedDataContext.EFCore.UnitOfWork.UOW">
            <summary>
            工作单元
            </summary>
        </member>
        <member name="M:AmazedDataContext.EFCore.UnitOfWork.UOW.#ctor(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            工作单元构造函数
            </summary>
            <param name="context">sqlserver数据库上下文</param>
        </member>
        <member name="P:AmazedDataContext.EFCore.UnitOfWork.UOW.DbContext">
            <summary>
            sqlserver数据库上下文
            </summary>
        </member>
        <member name="M:AmazedDataContext.EFCore.UnitOfWork.UOW.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:AmazedDataContext.EFCore.UnitOfWork.UOW.Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:AmazedDataContext.EFCore.UnitOfWork.UOW.Transaction">
            <summary>
            事务开始
            </summary>
        </member>
        <member name="T:AmazedDataContext.Entity">
            <summary>
            实体基类
            </summary>
            <typeparam name="T">主键类型</typeparam>
        </member>
        <member name="P:AmazedDataContext.Entity.IsDeleted">
            <summary>
            删除标识
            </summary>
        </member>
        <member name="P:AmazedDataContext.Entity.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:AmazedDataContext.Entity.DeleteTime">
            <summary>
            删除时间
            </summary>
        </member>
        <member name="P:AmazedDataContext.Entity.UpdateTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="T:AmazedDataContext.EnumSequence">
            <summary>
            排序方式
            </summary>
        </member>
        <member name="F:AmazedDataContext.EnumSequence.Descending">
            <summary>
            降序
            </summary>
        </member>
        <member name="F:AmazedDataContext.EnumSequence.Ascending">
            <summary>
            升序
            </summary>
        </member>
        <member name="T:AmazedDataContext.Model.BaseQueryModel">
            <summary>
            查询模型基类
            </summary>
        </member>
        <member name="P:AmazedDataContext.Model.BaseQueryModel.Keyword">
            <summary>
            关键字
            </summary>
        </member>
        <member name="P:AmazedDataContext.Model.BaseQueryModel.PageIndex">
            <summary>
            页面索引
            </summary>
        </member>
        <member name="P:AmazedDataContext.Model.BaseQueryModel.PageSize">
            <summary>
            页面大小
            </summary>
        </member>
        <member name="T:AmazedDataContext.Model.DBViewAttribute">
            <summary>
            视图特性
            </summary>
        </member>
        <member name="T:AmazedDataContext.MongoDB.MongoDbContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:AmazedDataContext.MongoDB.MongoDbContext.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AmazedDataContext.MongoDB.MongoDbContext.OnConfiguring(AmazedDataContext.MongoDB.MongoDbContextOptionsBuilder)">
            <summary>
            
            </summary>
            <param name="optionsBuilder"></param>
        </member>
        <member name="M:AmazedDataContext.MongoDB.MongoDbContext.GetMongoClient">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.MongoDbContext.GetMongoDatabase">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.MongoDbContext.OnModelCreating(AmazedDataContext.MongoDB.MongoDbContextOptionsBuilder)">
            <summary>
            
            </summary>
            <param name="optionsBuilder"></param>
        </member>
        <member name="T:AmazedDataContext.MongoDB.MongoDbSet`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AmazedDataContext.MongoDB.MongoDbSet`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AmazedDataContext.MongoDB.MongoRepositoryBase`1.FindOne(System.Object)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.MongoRepositoryBase`1.FindOneAsync(System.Object)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:AmazedDataContext.MongoDB.Repository.MongoRepository`1">
            <summary>
            仓储基类
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:AmazedDataContext.MongoDB.Repository.MongoRepository`1.UOW">
            <summary>
            工作单元
            </summary>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.#ctor(System.String,System.String)">
            <summary>
            构造函数，初始化上下文
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="databaseName"></param>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.GetMongoCollection``1">
            <summary>
            获取mongodb的集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            异步统计
            </summary>
            <param name="condition">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            异步统计
            </summary>
            <param name="condition">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.Delete(`0)">
            <summary>
            删除一条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.Delete(System.Collections.Generic.IList{`0})">
            <summary>
            删除多条实体
            </summary>
            <param name="entities">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.DeleteAsync(`0)">
            <summary>
            异步删除一条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.DeleteAsync(System.Collections.Generic.IList{`0})">
            <summary>
            异步删除多条实体
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.Find(System.Object[])">
            <summary>
            查询，多主键有待验证
            </summary>
            <param name="primaryKey">主键</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},AmazedDataContext.EnumSequence,System.Int32,System.Int32)">
            <summary>
            查询多条实体
            </summary>
            <param name="condition">条件表达式条件</param>
            <param name="keySelector">排序关键字（根据某个关键字排序）</param>
            <param name="sortMode">顺序/倒序（默认顺序）</param>
            <param name="pageIndex">索引页数</param>
            <param name="pageSize">索引页大小</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.FindAsync(System.Object[])">
            <summary>
            异步查询，多主键有待验证
            </summary>
            <param name="primaryKey">主键</param>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.FindAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},AmazedDataContext.EnumSequence,System.Int32,System.Int32)">
            <summary>
            异步查询多条实体
            </summary>
            <param name="condition">条件表达式</param>
            <param name="keySelector">排序关键字（根据某个关键字排序）</param>
            <param name="sortMode">排序方式，默认顺序</param>
            <param name="pageIndex">页面索引</param>
            <param name="pageSize">页面大小</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},AmazedDataContext.EnumSequence)">
            <summary>
            查询所有的实体
            </summary>
            <param name="condition">条件表达式</param>
            <param name="keySelector">排序关键字（根据某个关键字排序）</param>
            <param name="sortMode">排序方式，默认顺序</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.FindAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},AmazedDataContext.EnumSequence)">
            <summary>
            异步查询所有的实体
            </summary>
            <param name="condition">条件表达式</param>
            <param name="keySelector">排序关键字（根据某个关键字排序）</param>
            <param name="sortMode">排序方式，默认顺序</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.Insert(`0)">
            <summary>
            插入一条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.Insert(System.Collections.Generic.IList{`0})">
            <summary>
            插入多条实体
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.InsertAsync(`0)">
            <summary>
            异步插入一条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.InsertAsync(System.Collections.Generic.IList{`0})">
            <summary>
            异步插入多条实体
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.MarkDelete(`0)">
            <summary>
            修改一条实体的删除标识，改为true
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.MarkDelete(System.Collections.Generic.IList{`0})">
            <summary>
            修改多条实体的删除标识，改为true
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.MarkDeleteAsync(`0)">
            <summary>
            异步修改一条实体的删除标识，改为true
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.MarkDeleteAsync(System.Collections.Generic.IList{`0})">
            <summary>
            异步修改多条实体的删除标识，改为true
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.UnmarkDelete(`0)">
            <summary>
            修改一条实体的删除标识，改为false
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.UnmarkDelete(System.Collections.Generic.IList{`0})">
            <summary>
            修改多条实体的删除标识，改为false
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.UnmarkDeleteAsync(`0)">
            <summary>
            异步修改一条实体的删除标识，改为false
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.UnmarkDeleteAsync(System.Collections.Generic.IList{`0})">
            <summary>
            异步修改多条实体的删除标识，改为false
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.Update(`0)">
            <summary>
            更新单条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.Update(System.Collections.Generic.IList{`0})">
            <summary>
            更新多条实体
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.UpdateAsync(`0)">
            <summary>
            异步更新单条实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.MongoDB.Repository.MongoRepository`1.UpdateAsync(System.Collections.Generic.IList{`0})">
            <summary>
            异步更新多条实体
            </summary>
            <param name="entities">多条实体</param>
            <returns></returns>
        </member>
        <member name="T:AmazedDataContext.MongoDB.UnitOfWork.UOW">
            <summary>
            mongo工作单元
            </summary>
        </member>
        <member name="P:AmazedDataContext.MongoDB.UnitOfWork.UOW.Client">
            <summary>
            Mongo客户端
            </summary>
        </member>
        <member name="P:AmazedDataContext.MongoDB.UnitOfWork.UOW.Database">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="M:AmazedDataContext.MongoDB.UnitOfWork.UOW.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectString">连接字符串</param>
            <param name="databaseName">数据库名称</param>
        </member>
        <member name="M:AmazedDataContext.MongoDB.UnitOfWork.UOW.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:AmazedDataContext.MongoDB.UnitOfWork.UOW.Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:AmazedDataContext.MongoDB.UnitOfWork.UOW.Transaction">
            <summary>
            创建事务
            </summary>
        </member>
        <member name="T:AmazedDataContext.Redis.RedisOperation">
            <summary>
            Redis操作类
            </summary>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.#ctor(System.Func{StackExchange.Redis.ConfigurationOptions},System.Func{System.Int32})">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:AmazedDataContext.Redis.RedisOperation.CacheConnection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="P:AmazedDataContext.Redis.RedisOperation.CacheRedis">
            <summary>
            缓存数据库
            </summary>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.StringSet(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            保存一条记录
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expiry">过期时间（多久之后过期）</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.StringSet``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            保存一条记录
            </summary>
            <typeparam name="T">保存对象的类型</typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expiry">过期时间（多久之后过期）</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.StringSet(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            保存多条记录
            </summary>
            <param name="pairs">键值对</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.StringAppend(System.String,System.String)">
            <summary>
            为指定key的value追加字符串
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>返回字符串追加后的长度</returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.StringGet(System.String)">
            <summary>
            获取单条记录
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.StringGet``1(System.String)">
            <summary>
            获取一个key的对象
            </summary>
            <typeparam name="T">保存对象的类型</typeparam>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.StringGet(System.Collections.Generic.IList{System.String})">
            <summary>
            获取多条记录
            </summary>
            <param name="keys">键列表</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.ListGet(System.String)">
            <summary>
            获取List列表
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.ListGet``1(System.String)">
            <summary>
            获取List列表
            </summary>
            <typeparam name="T">保存对象的类型</typeparam>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.ListGetByIndex(System.String,System.Int32)">
            <summary>
            获取List列表中指定索引处的值
            </summary>
            <param name="key">键</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.ListGetByIndex``1(System.String,System.Int32)">
            <summary>
            获取List列表中指定索引处的对象
            </summary>
            <typeparam name="T">保存对象的类型</typeparam>
            <param name="key">键</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.ListSetByIndex(System.String,System.Int64,System.String)">
            <summary>
            替换List列表中指定索引处的值
            </summary>
            <param name="key">键</param>
            <param name="index">索引</param>
            <param name="value">值</param>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.ListSetByIndex``1(System.String,System.Int64,``0)">
            <summary>
            替换List列表中指定索引处的对象
            </summary>
            <typeparam name="T">保存对象的类型</typeparam>
            <param name="key">键</param>
            <param name="index">索引</param>
            <param name="value">值</param>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.ListRemove(System.String,System.String,System.Int64)">
            <summary>
            移除列表中与value匹配的值
            当 count 大于 0 时：从头到尾移除列表中与value匹配的值，移除数量为count的绝对值。
            当 count 小于 0 时：从尾到头移除列表中与value匹配的值，移除数量为count的绝对值。
            当 count 等于 0 时：移除列表中所有与value匹配的值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="count">移除行为</param>
            <returns>移除的值的个数</returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.ListRemove``1(System.String,``0,System.Int64)">
            <summary>
            移除列表中与value匹配的对象
            当 count 大于 0 时：从头到尾移除列表中与value匹配的值，移除数量为count的绝对值。
            当 count 小于 0 时：从尾到头移除列表中与value匹配的值，移除数量为count的绝对值。
            当 count 等于 0 时：移除列表中所有与value匹配的值
            </summary>
            <typeparam name="T">保存对象的类型</typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="count">移除行为</param>
            <returns>移除的值的个数</returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.HashGet(System.String)">
            <summary>
            获取Hash表
            </summary>
            <param name="key">键</param>
            <returns>hash表中的键值对</returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.HashGet``1(System.String)">
            <summary>
            获取Hash表
            </summary>
            <typeparam name="T">hash表中保存对象的类型</typeparam>
            <param name="key">键</param>
            <returns>hash表中的键值对</returns>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.HashGet(System.String,System.String)">
            <summary>
            获取hash表中指定字段的值
            </summary>
            <param name="key">键</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.HashGet``1(System.String,System.String)">
            <summary>
            获取hash表中指定字段的对象
            </summary>
            <typeparam name="T">hash表中保存对象的类型</typeparam>
            <param name="key">键</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.HashSet(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            保存Hash表
            </summary>
            <param name="key">键</param>
            <param name="pairs">hash表中的键值对</param>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.HashSet``1(System.String,System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            保存Hash表
            </summary>
            <typeparam name="T">hash表中保存对象的类型</typeparam>
            <param name="key">键</param>
            <param name="pairs">hash表中的键值对</param>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.HashDelete(System.String,System.String)">
            <summary>
            删除Hash表中指定字段的值
            </summary>
            <param name="key">键</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.HashExist(System.String,System.String)">
            <summary>
            判断Hash表中是否存在指定字段
            </summary>
            <param name="key">键</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.SetInsert(System.String,System.String)">
            <summary>
            向Set集合中添加值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.SetInsert``1(System.String,``0)">
            <summary>
            向Set集合中添加值
            </summary>
            <typeparam name="T">集合保存的值的类型</typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.SetDelete(System.String,System.String)">
            <summary>
            删除Set集合中的匹配值
            </summary>
            <param name="key">键</param>
            <param name="value">要删除的值</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.SetDelete``1(System.String,``0)">
            <summary>
            删除Set集合中的匹配值
            </summary>
            <typeparam name="T">集合保存的值的类型</typeparam>
            <param name="key">键</param>
            <param name="value">要删除的值</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.SetLength(System.String)">
            <summary>
            Set集合大小
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.SetContains(System.String,System.String)">
            <summary>
            判断Set集合中是否存在指定的值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.SetContains``1(System.String,``0)">
            <summary>
            判断Set集合中是否存在指定的值
            </summary>
            <typeparam name="T">集合保存的值的类型</typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.SetGet(System.String,System.String,System.Int32)">
            <summary>
            获取Set集合中所有匹配的值
            </summary>
            <param name="key">键</param>
            <param name="pattern">模式匹配（正则）</param>
            <param name="pageSize">匹配值的数量</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.SetGet``1(System.String,System.String,System.Int32)">
            <summary>
            获取Set集合中所有匹配的值
            </summary>
            <typeparam name="T">集合保存的值的类型</typeparam>
            <param name="key">键</param>
            <param name="pattern">模式匹配（正则）</param>
            <param name="pageSize">匹配值的数量</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.SetGet(System.String)">
            <summary>
            获取Set集合中所有值
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.SetGet``1(System.String)">
            <summary>
            获取Set集合中所有值
            </summary>
            <typeparam name="T">集合保存的值的类型</typeparam>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.ZSetInsert(System.String,System.String,System.Double)">
            <summary>
            向ZSet集合中添加值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="score">权重</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.ZSetInsert``1(System.String,``0,System.Double)">
            <summary>
            向ZSet集合中添加值
            </summary>
            <typeparam name="T">集合保存的值的类型</typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="score">权重</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.ZSetDelete(System.String,System.String)">
            <summary>
            删除ZSet集合中匹配的值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.ZSetDelete``1(System.String,System.String)">
            <summary>
            删除ZSet集合中匹配的值
            </summary>
            <typeparam name="T">集合保存的值的类型</typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.ZSetLength(System.String)">
            <summary>
            计算ZSet集合的大小
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.ZSetGet(System.String,System.String,System.Int32)">
            <summary>
            获取ZSet集合中所有匹配的值
            </summary>
            <param name="key">键</param>
            <param name="pattern">模式匹配（正则）</param>
            <param name="pageSize">匹配值的数量</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.ZSetGet``1(System.String,System.String,System.Int32)">
            <summary>
            获取ZSet集合中所有匹配的值
            </summary>
            <typeparam name="T">集合保存的值的类型</typeparam>
            <param name="key">键</param>
            <param name="pattern">模式匹配（正则）</param>
            <param name="pageSize">匹配值的数量</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.KeyDelete(System.String)">
            <summary>
            删除单个key
            </summary>
            <param name="key">键</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.KeysDelete(System.Collections.Generic.IList{System.String})">
            <summary>
            删除多个key
            </summary>
            <param name="keys">键集合</param>
            <returns>成功删除的个数</returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.RenameKey(System.String,System.String)">
            <summary>
            重新命名key
            </summary>
            <param name="oldKey">旧键</param>
            <param name="newKey">新键</param>
            <returns></returns>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.SetExpire(System.String,System.DateTime)">
            <summary>
            设置缓存过期
            </summary>
            <param name="key">键</param>
            <param name="datetime">过期时间</param>
        </member>
        <member name="M:AmazedDataContext.Redis.RedisOperation.KeyExist(System.String)">
            <summary>
            判断key是否存在
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="T:AmazedDataContext.StringResource">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:AmazedDataContext.StringResource.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:AmazedDataContext.StringResource.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:AmazedDataContext.StringResource._2DFFD5DF_292D_4E3F_9CA2_0B238B2258E7">
            <summary>
              查找类似 entities的长度必须大于0 的本地化字符串。
            </summary>
        </member>
        <member name="P:AmazedDataContext.StringResource._47B50496_4949_443F_8D22_15D008056E32">
            <summary>
              查找类似 的值不能为空或长度不能小于等于0 的本地化字符串。
            </summary>
        </member>
    </members>
</doc>
