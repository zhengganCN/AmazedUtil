<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VirtualUniverse.RedisRepository</name>
    </assembly>
    <members>
        <member name="T:VirtualUniverse.RedisRepository.Repository.RedisRepository">
            <summary>
            Redis操作类
            </summary>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.#ctor(System.Func{StackExchange.Redis.ConfigurationOptions},System.Func{System.Int32})">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:VirtualUniverse.RedisRepository.Repository.RedisRepository.CacheConnection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="P:VirtualUniverse.RedisRepository.Repository.RedisRepository.CacheRedis">
            <summary>
            缓存数据库
            </summary>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.StringSet(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            保存一条记录
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expiry">过期时间（多久之后过期）</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.StringSet``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            保存一条记录
            </summary>
            <typeparam name="T">保存对象的类型</typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expiry">过期时间（多久之后过期）</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.StringSet(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            保存多条记录
            </summary>
            <param name="pairs">键值对</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.StringAppend(System.String,System.String)">
            <summary>
            为指定key的value追加字符串
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>返回字符串追加后的长度</returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.StringGet(System.String)">
            <summary>
            获取单条记录
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.StringGet``1(System.String)">
            <summary>
            获取一个key的对象
            </summary>
            <typeparam name="T">保存对象的类型</typeparam>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.StringGet(System.Collections.Generic.IList{System.String})">
            <summary>
            获取多条记录
            </summary>
            <param name="keys">键列表</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.ListGet(System.String)">
            <summary>
            获取List列表
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.ListGet``1(System.String)">
            <summary>
            获取List列表
            </summary>
            <typeparam name="T">保存对象的类型</typeparam>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.ListGetByIndex(System.String,System.Int32)">
            <summary>
            获取List列表中指定索引处的值
            </summary>
            <param name="key">键</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.ListGetByIndex``1(System.String,System.Int32)">
            <summary>
            获取List列表中指定索引处的对象
            </summary>
            <typeparam name="T">保存对象的类型</typeparam>
            <param name="key">键</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.ListSetByIndex(System.String,System.Int64,System.String)">
            <summary>
            替换List列表中指定索引处的值
            </summary>
            <param name="key">键</param>
            <param name="index">索引</param>
            <param name="value">值</param>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.ListSetByIndex``1(System.String,System.Int64,``0)">
            <summary>
            替换List列表中指定索引处的对象
            </summary>
            <typeparam name="T">保存对象的类型</typeparam>
            <param name="key">键</param>
            <param name="index">索引</param>
            <param name="value">值</param>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.ListRemove(System.String,System.String,System.Int64)">
            <summary>
            移除列表中与value匹配的值
            当 count 大于 0 时：从头到尾移除列表中与value匹配的值，移除数量为count的绝对值。
            当 count 小于 0 时：从尾到头移除列表中与value匹配的值，移除数量为count的绝对值。
            当 count 等于 0 时：移除列表中所有与value匹配的值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="count">移除行为</param>
            <returns>移除的值的个数</returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.ListRemove``1(System.String,``0,System.Int64)">
            <summary>
            移除列表中与value匹配的对象
            当 count 大于 0 时：从头到尾移除列表中与value匹配的值，移除数量为count的绝对值。
            当 count 小于 0 时：从尾到头移除列表中与value匹配的值，移除数量为count的绝对值。
            当 count 等于 0 时：移除列表中所有与value匹配的值
            </summary>
            <typeparam name="T">保存对象的类型</typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="count">移除行为</param>
            <returns>移除的值的个数</returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.HashGet(System.String)">
            <summary>
            获取Hash表
            </summary>
            <param name="key">键</param>
            <returns>hash表中的键值对</returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.HashGet``1(System.String)">
            <summary>
            获取Hash表
            </summary>
            <typeparam name="T">hash表中保存对象的类型</typeparam>
            <param name="key">键</param>
            <returns>hash表中的键值对</returns>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.HashGet(System.String,System.String)">
            <summary>
            获取hash表中指定字段的值
            </summary>
            <param name="key">键</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.HashGet``1(System.String,System.String)">
            <summary>
            获取hash表中指定字段的对象
            </summary>
            <typeparam name="T">hash表中保存对象的类型</typeparam>
            <param name="key">键</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.HashSet(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            保存Hash表
            </summary>
            <param name="key">键</param>
            <param name="pairs">hash表中的键值对</param>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.HashSet``1(System.String,System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            保存Hash表
            </summary>
            <typeparam name="T">hash表中保存对象的类型</typeparam>
            <param name="key">键</param>
            <param name="pairs">hash表中的键值对</param>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.HashDelete(System.String,System.String)">
            <summary>
            删除Hash表中指定字段的值
            </summary>
            <param name="key">键</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.HashExist(System.String,System.String)">
            <summary>
            判断Hash表中是否存在指定字段
            </summary>
            <param name="key">键</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.SetInsert(System.String,System.String)">
            <summary>
            向Set集合中添加值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.SetInsert``1(System.String,``0)">
            <summary>
            向Set集合中添加值
            </summary>
            <typeparam name="T">集合保存的值的类型</typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.SetDelete(System.String,System.String)">
            <summary>
            删除Set集合中的匹配值
            </summary>
            <param name="key">键</param>
            <param name="value">要删除的值</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.SetDelete``1(System.String,``0)">
            <summary>
            删除Set集合中的匹配值
            </summary>
            <typeparam name="T">集合保存的值的类型</typeparam>
            <param name="key">键</param>
            <param name="value">要删除的值</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.SetLength(System.String)">
            <summary>
            Set集合大小
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.SetContains(System.String,System.String)">
            <summary>
            判断Set集合中是否存在指定的值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.SetContains``1(System.String,``0)">
            <summary>
            判断Set集合中是否存在指定的值
            </summary>
            <typeparam name="T">集合保存的值的类型</typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.SetGet(System.String,System.String,System.Int32)">
            <summary>
            获取Set集合中所有匹配的值
            </summary>
            <param name="key">键</param>
            <param name="pattern">模式匹配（正则）</param>
            <param name="pageSize">匹配值的数量</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.SetGet``1(System.String,System.String,System.Int32)">
            <summary>
            获取Set集合中所有匹配的值
            </summary>
            <typeparam name="T">集合保存的值的类型</typeparam>
            <param name="key">键</param>
            <param name="pattern">模式匹配（正则）</param>
            <param name="pageSize">匹配值的数量</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.SetGet(System.String)">
            <summary>
            获取Set集合中所有值
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.SetGet``1(System.String)">
            <summary>
            获取Set集合中所有值
            </summary>
            <typeparam name="T">集合保存的值的类型</typeparam>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.ZSetInsert(System.String,System.String,System.Double)">
            <summary>
            向ZSet集合中添加值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="score">权重</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.ZSetInsert``1(System.String,``0,System.Double)">
            <summary>
            向ZSet集合中添加值
            </summary>
            <typeparam name="T">集合保存的值的类型</typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="score">权重</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.ZSetDelete(System.String,System.String)">
            <summary>
            删除ZSet集合中匹配的值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.ZSetDelete``1(System.String,System.String)">
            <summary>
            删除ZSet集合中匹配的值
            </summary>
            <typeparam name="T">集合保存的值的类型</typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.ZSetLength(System.String)">
            <summary>
            计算ZSet集合的大小
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.ZSetGet(System.String,System.String,System.Int32)">
            <summary>
            获取ZSet集合中所有匹配的值
            </summary>
            <param name="key">键</param>
            <param name="pattern">模式匹配（正则）</param>
            <param name="pageSize">匹配值的数量</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.ZSetGet``1(System.String,System.String,System.Int32)">
            <summary>
            获取ZSet集合中所有匹配的值
            </summary>
            <typeparam name="T">集合保存的值的类型</typeparam>
            <param name="key">键</param>
            <param name="pattern">模式匹配（正则）</param>
            <param name="pageSize">匹配值的数量</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.KeyDelete(System.String)">
            <summary>
            删除单个key
            </summary>
            <param name="key">键</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.KeysDelete(System.Collections.Generic.IList{System.String})">
            <summary>
            删除多个key
            </summary>
            <param name="keys">键集合</param>
            <returns>成功删除的个数</returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.RenameKey(System.String,System.String)">
            <summary>
            重新命名key
            </summary>
            <param name="oldKey">旧键</param>
            <param name="newKey">新键</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.SetExpire(System.String,System.DateTime)">
            <summary>
            设置缓存过期
            </summary>
            <param name="key">键</param>
            <param name="datetime">过期时间</param>
        </member>
        <member name="M:VirtualUniverse.RedisRepository.Repository.RedisRepository.KeyExist(System.String)">
            <summary>
            判断key是否存在
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
    </members>
</doc>
