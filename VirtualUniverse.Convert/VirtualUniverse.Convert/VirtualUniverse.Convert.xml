<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VirtualUniverse.Convert</name>
    </assembly>
    <members>
        <member name="T:VirtualUniverse.Convert.BaseConvert.BinaryConvert">
            <summary>
            二进制转换
            </summary>
        </member>
        <member name="M:VirtualUniverse.Convert.BaseConvert.BinaryConvert.ToHex(System.String)">
            <summary>
            二进制转十六进制
            </summary>
            <param name="binary">二进制字符串</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.Convert.BaseConvert.BinaryConvert.ToDecimal(System.String)">
            <summary>
            二进制转十进制
            </summary>
            <param name="binary">二进制字符串</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.Convert.BaseConvert.BinaryConvert.ToOctal(System.String)">
            <summary>
            二进制转八进制
            </summary>
            <param name="binary">二进制字符串</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.Convert.BaseConvert.BinaryConvert.CheckBinaryData(System.String)">
            <summary>
            检查二进制字符串是否只包含0或1
            </summary>
            <param name="binary">二进制字符串</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.Convert.BaseConvert.BinaryConvert.GetHexCharFromFourBinaryChar(System.String)">
            <summary>
            通过4位二进制数获取1位16进制数
            如：1111 => F
            </summary>
            <param name="fourBinary">4位二进制数</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.Convert.BaseConvert.BinaryConvert.GetOctalCharFromThreeBinaryChar(System.String)">
            <summary>
            通过3位二进制数获取1位8进制数
            如：111 => 7
            </summary>
            <param name="threeBinary">3位二进制数</param>
            <returns></returns>
        </member>
        <member name="T:VirtualUniverse.Convert.BaseConvert.DecimalConvert">
            <summary>
            进制转换
            </summary>
        </member>
        <member name="M:VirtualUniverse.Convert.BaseConvert.DecimalConvert.ToHex(System.Int32)">
            <summary>
            十进制转十六进制
            </summary>
            <param name="dec">十进制数</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.Convert.BaseConvert.DecimalConvert.ToBinary(System.Int32)">
            <summary>
            十进制转二进制
            </summary>
            <param name="dec">十进制数</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.Convert.BaseConvert.DecimalConvert.ToOctal(System.Int32)">
            <summary>
            十进制转八进制
            </summary>
            <param name="dec">十进制数</param>
            <returns></returns>
        </member>
        <member name="T:VirtualUniverse.Convert.BaseConvert.HexConvert">
            <summary>
            16进制转换
            </summary>
        </member>
        <member name="M:VirtualUniverse.Convert.BaseConvert.HexConvert.ToDecimal(System.String)">
            <summary>
            十六进制转十进制
            </summary>
            <param name="hex">十六进制数</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.Convert.BaseConvert.HexConvert.ToBinary(System.String)">
            <summary>
            十六进制转二进制
            </summary>
            <param name="hex">十六进制数</param>
            <returns></returns>
        </member>
        <member name="M:VirtualUniverse.Convert.BaseConvert.HexConvndefined, because an empty message is legal (and falsy)
                    prefix += "-";

                    $.each(this.params, function () {
                        paramValues[this] = $element.attr(prefix + this);
                    });

                    this.adapt({
                        element: element,
                        form: form,
                        message: message,
                        params: paramValues,
                        rules: rules,
                        messages: messages
                    });
                }
            });

            $.extend(rules, { "__dummy__": true });

            if (!skipAttach) {
                valInfo.attachValidation();
            }
        },

        parse: function (selector) {
            /// <summary>
            /// Parses all the HTML elements in the specified selector. It looks for input elements decorated
            /// with the [data-val=true] attribute value and enables validation according to the data-val-*
            /// attribute values.
            /// </summary>
            /// <param name="selector" type="String">Any valid jQuery selector.</param>

            // $forms includes all forms in selector's DOM hierarchy (parent, children and self) that have at least one
            // element with data-val=true
            var $selector = $(selector),
                $forms = $selector.parents()
                    .addBack()
                    .filter("form")
                    .add($selector.find("form"))
                    .has("[data-val=true]");

            $selector.find("[data-val=true]").each(function () {
                $jQval.unobtrusive.parseElement(this, true);
            });

            $forms.each(function () {
                var info = validationInfo(this);
                if (info) {
                    info.attachValidation();
                }
            });
        }
    };

    adapters = $jQval.unobtrusive.adapters;

    adapters.add = function (adapterName, params, fn) {
        /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation.</summary>
        /// <param name="adapterName" type="String">The name of the adapter to be added. This matches the name used
        /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).</param>
        /// <param name="params" type="Array" optional="true">[Optional] An array of parameter names (strings) that will
        /// be extracted from the data-val-nnnn-mmmm HTML attributes (where nnnn is the adapter name, and
        /// mmmm is the parameter name).</param>
        /// <param name="fn" type="Function">The function to call, which adapts the values from the HTML
        /// attributes into jQuery Validate rules and/or messages.</param>
        /// <returns type="jQuery.validator.unobtrusive.adapters" />
        if (!fn) {  // Called with no params, just a function
            fn = params;
            params = [];
        }
        this.push({ name: adapterName, params: params, adapt: fn });
        return this;
    };

    adapters.addBool = function (adapterName, ruleName) {
        /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where
        /// the jQuery Validate validation rule has no parameter values.</summary>
        /// <param name="adapterName" type="String">The name of the adapter to be added. This matches the name used
        /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).</param>
        /// <param name="ruleName" type="String" optional="true">[Optional] The name of the jQuery Validate rule. If not provided, the value
        /// of adapterName will be used instead.</param>
        /// <returns type="jQuery.validator.unobtrusive.adapters" />
        return this.add(adapterName, function (options) {
            setValidationValues(options, ruleName || adapterName, true);
        });
    };

    adapters.addMinMax = function (adapterName, minRuleName, maxRuleName, minMaxRuleName, minAttribute, maxAttribute) {
        /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validat