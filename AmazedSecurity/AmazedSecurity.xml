<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AmazedSecurity</name>
    </assembly>
    <members>
        <member name="T:AmazedSecurity.Cryptography.AESHelper">
            <summary>
            对称加密算法，算法支持的密钥长度为128、192、256位。IV长度位128位
            </summary>
        </member>
        <member name="M:AmazedSecurity.Cryptography.AESHelper.AESEncrypt(System.Byte[],System.Byte[],AmazedSecurity.Cryptography.AESHelper.KeyType)">
            <summary>
            AES加密算法
            </summary>
            <param name="data">需加密的数据</param>
            <param name="key">密钥</param>
            <param name="keyType">密钥长度</param>
            <returns></returns>
        </member>
        <member name="M:AmazedSecurity.Cryptography.AESHelper.AESDecrypt(System.Byte[],System.Byte[],AmazedSecurity.Cryptography.AESHelper.KeyType)">
            <summary>
            AES解密算法
            </summary>
            <param name="data">需解密的数据</param>
            <param name="key">密钥</param>
            <param name="keyType">密钥长度</param>
            <returns></returns>
        </member>
        <member name="T:AmazedSecurity.Cryptography.AESHelper.KeyType">
            <summary>
            密钥长度
            </summary>
        </member>
        <member name="F:AmazedSecurity.Cryptography.AESHelper.KeyType.Key128">
            <summary>
            密钥长度为128
            </summary>
        </member>
        <member name="F:AmazedSecurity.Cryptography.AESHelper.KeyType.Key192">
            <summary>
            密钥长度为192
            </summary>
        </member>
        <member name="F:AmazedSecurity.Cryptography.AESHelper.KeyType.Key256">
            <summary>
            密钥长度为256
            </summary>
        </member>
        <member name="T:AmazedSecurity.Cryptography.DESHelper">
            <summary>
            对称加密算法，算法支持的密钥长度为64位。
            </summary>
        </member>
        <member name="M:AmazedSecurity.Cryptography.DESHelper.DESEncrypt(System.Byte[],System.Byte[])">
            <summary>
            DES加密
            </summary>
            <param name="data">需加密的数据</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:AmazedSecurity.Cryptography.DESHelper.DESDecrypt(System.Byte[],System.Byte[])">
            <summary>
            DES解密
            </summary>
            <param name="data">需解密的数据</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:AmazedSecurity.Cryptography.DESHelper.GetKey(System.Byte[])">
            <summary>
            获取密钥
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:AmazedSecurity.Cryptography.MD5Helper">
            <summary>
            hash算法，MD5
            </summary>
        </member>
        <member name="M:AmazedSecurity.Cryptography.MD5Helper.Encrypt(System.Byte[])">
            <summary>
            MD5加密
            </summary>
            <param name="data">需加密的数据</param>
            <returns>16进制字符串</returns>
        </member>
        <member name="T:AmazedSecurity.Cryptography.RSAHelper">
            <summary>
            RSA加密/解密,非对称算法
            </summary>
        </member>
        <member name="M:AmazedSecurity.Cryptography.RSAHelper.Encrypt(System.Byte[],System.Security.Cryptography.RSAParameters)">
            <summary>
            RSA加密
            </summary>
            <param name="dataToEncrypt"></param>
            <param name="rsaParameters"></param>
            <returns></returns>
        </member>
        <member name="M:AmazedSecurity.Cryptography.RSAHelper.Decrypt(System.Byte[],System.Security.Cryptography.RSAParameters)">
            <summary>
            RSA解密
            </summary>
            <param name="dataToDecrypt"></param>
            <param name="rsaParameters"></param>
            <returns></returns>
        </member>
        <member name="M:AmazedSecurity.Cryptography.RSAHelper.SignatureData(System.Byte[],System.Security.Cryptography.RSAParameters,System.Object)">
            <summary>
            RSA签名
            </summary>
            <param name="dataToSignature">待签名数据</param>
            <param name="rsaParameters">rsa参数</param>
            <param name="hashAlgorithm">hash算法实例，如果hashAlgorithm==null，则默认使用sha256算法</param>
            <returns>已签名数据</returns>
        </member>
        <member name="M:AmazedSecurity.Cryptography.RSAHelper.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.RSAParameters,System.Object)">
            <summary>
            RSA验签
            </summary>
            <param name="dataToVerify">待验签数据</param>
            <param name="signaturedData">已签名数据</param>
            <param name="rsaParameters">rsa参数</param>
            <param name="hashAlgorithm">hash算法实例，如果hashAlgorithm==null，则默认使用sha256算法</param>
            <returns>验签是否通过</returns>
        </member>
        <member name="M:AmazedSecurity.Cryptography.RSAHelper.VaildDataIsMoreLength(System.Byte[],System.Security.Cryptography.RSA)">
            <summary>
            //验证要加密的数据是否超长
            </summary>
            <param name="data"></param>
            <param name="rsa"></param>
            <returns></returns>
        </member>
        <member name="M:AmazedSecurity.Cryptography.RSAHelper.GeneratePkcs8EncryptedPrivateKey(System.Byte[],System.Security.Cryptography.PbeParameters,AmazedSecurity.Cryptography.RSAHelper.RSAKeySizeInBits)">
            <summary>
            生成Pkcs8格式的加密后的私钥
            </summary>
            <param name="password"></param>
            <param name="pbeParameters"></param>
            <param name="keySizeInBits">密钥长度</param>
            <returns>Base64</returns>
        </member>
        <member name="M:AmazedSecurity.Cryptography.RSAHelper.GeneratePkcs8PrivateKey(AmazedSecurity.Cryptography.RSAHelper.RSAKeySizeInBits)">
            <summary>
            生成Pkcs8格式的私钥
            <param name="keySizeBits">密钥长度</param>
            </summary>
            <returns>Base64</returns>
        </member>
        <member name="M:AmazedSecurity.Cryptography.RSAHelper.GeneratePkcs1PrivateKey(AmazedSecurity.Cryptography.RSAHelper.RSAKeySizeInBits)">
            <summary>
            生成Pkcs1格式的私钥
            </summary>
            <param name="keySizeBits">密钥长度</param>
            <returns>Base64</returns>
        </member>
        <member name="M:AmazedSecurity.Cryptography.RSAHelper.GetPkcs8PrivateKeyFromEncryptedPrivatedPrivateKey(System.Byte[],System.String)">
            <summary>
            从加密的Pkcs8格式的私钥中获取未加密的Pkcs8格式的私钥
            </summary>
            <param name="password"></param>
            <param name="encryptedPrivateKey"></param>
            <returns>Base64</returns>
        </member>
        <member name="M:AmazedSecurity.Cryptography.RSAHelper.GetPkcs1PublicKeyFromPkcs8PrivateKey(System.Byte[])">
            <summary>
            从Pkcs8格式的私钥中获取Pkcs1格式的公钥
            </summary>
            <param name="privateKey"></param>
            <returns>Base64</returns>
        </member>
        <member name="M:AmazedSecurity.Cryptography.RSAHelper.GetPkcs1PublicKeyFromPkcs1PrivateKey(System.Byte[])">
            <summary>
            从Pkcs1格式的私钥中获取Pkcs1格式的公钥
            </summary>
            <param name="privateKey"></param>
            <returns>Base64</returns>
        </member>
        <member name="M:AmazedSecurity.Cryptography.RSAHelper.ImportPkcs1PublicKey(System.Byte[])">
            <summary>
            导入Pkcs1格式的公钥
            </summary>
            <param name="publicKey">公钥</param>
            <returns>rsa</returns>
        </member>
        <member name="M:AmazedSecurity.Cryptography.RSAHelper.ImportPkcs1PrivateKey(System.Byte[])">
            <summary>
            导入Pkcs1格式的私钥
            </summary>
            <param name="privateKey">私钥</param>
            <returns>rsa</returns>
        </member>
        <member name="M:AmazedSecurity.Cryptography.RSAHelper.ImportPkcs8PrivateKey(System.Byte[])">
            <summary>
            导入Pkcs8格式的私钥
            </summary>
            <param name="privateKey">私钥</param>
            <returns>rsa</returns>
        </member>
        <member name="T:AmazedSecurity.Cryptography.RSAHelper.RSAKeySizeInBits">
            <summary>
            密钥长度
            </summary>
        </member>
        <member name="F:AmazedSecurity.Cryptography.RSAHelper.RSAKeySizeInBits.Bits1024">
            <summary>
            密钥长度为1024
            </summary>
        </member>
        <member name="F:AmazedSecurity.Cryptography.RSAHelper.RSAKeySizeInBits.Bits2048">
            <summary>
            密钥长度为2048
            </summary>
        </member>
        <member name="T:AmazedSecurity.Cryptography.SHAHelper">
            <summary>
            hash算法
            </summary>
        </member>
        <member name="M:AmazedSecurity.Cryptography.SHAHelper.SHA1Encrypt(System.Byte[])">
            <summary>
            SHA1加密
            </summary>
            <param name="data">需加密的数据</param>
            <returns>16进制字符串</returns>
        </member>
        <member name="M:AmazedSecurity.Cryptography.SHAHelper.SHA256Encrypt(System.Byte[])">
            <summary>
            SHA256加密
            </summary>
            <param name="data">需加密的数据</param>
            <returns>16进制字符串</returns>
        </member>
        <member name="M:AmazedSecurity.Cryptography.SHAHelper.SHA384Encrypt(System.Byte[])">
            <summary>
            SHA384加密
            </summary>
            <param name="data">需加密的数据</param>
            <returns>16进制字符串</returns>
        </member>
        <member name="M:AmazedSecurity.Cryptography.SHAHelper.SHA512Encrypt(System.Byte[])">
            <summary>
            SHA512加密
            </summary>
            <param name="data">需加密的数据</param>
            <returns>16进制字符串</returns>
        </member>
        <member name="T:AmazedSecurity.JWT.JsonWebToken">
            <summary>
            jwt帮助类
            </summary>
        </member>
        <member name="M:AmazedSecurity.JWT.JsonWebToken.#ctor(System.String,System.Int32,System.Byte[],System.String)">
            <summary>
            构造函数
            </summary>
            <param name="issuer">JWT的签发者</param>
            <param name="expires">过期时间间隔</param>
            <param name="key">加密密钥</param>
            <param name="audience"></param>
        </member>
        <member name="M:AmazedSecurity.JWT.JsonWebToken.SetUserId(System.String)">
            <summary>
            设置用户唯一标识
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:AmazedSecurity.JWT.JsonWebToken.SetAuthorities(System.String)">
            <summary>
            设置用户权限列表
            </summary>
            <param name="authorities"></param>
        </member>
        <member name="M:AmazedSecurity.JWT.JsonWebToken.GetUserId(System.String)">
            <summary>
            获取token中的用户ID
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:AmazedSecurity.JWT.JsonWebToken.GetAuthorities(System.String)">
            <summary>
            获取token中的权限ID列表
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:AmazedSecurity.JWT.JsonWebToken.GenerateToken">
            <summary>
            生成Token
            </summary>
            <returns></returns>
        </member>
        <member name="T:AmazedSecurity.JWT.JWTParamModel">
            <summary>
            jwt参数模型
            </summary>
        </member>
        <member name="P:AmazedSecurity.JWT.JWTParamModel.Issuer">
            <summary>
            JWT的签发者
            </summary>
        </member>
        <member name="P:AmazedSecurity.JWT.JWTParamModel.Expires">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:AmazedSecurity.JWT.JWTParamModel.Key">
            <summary>
            密钥
            </summary>
        </member>
        <member name="P:AmazedSecurity.JWT.JWTParamModel.Audience">
            <summary>
            接受token者
            </summary>
        </member>
        <member name="T:AmazedSecurity.Permission.AutoGeneratePermission">
            <summary>
            自动生成权限列表，通过每个方法的<see cref="T:AmazedSecurity.Permission.PermissionAttribute"/>特性的<see cref="P:AmazedSecurity.Permission.PermissionAttribute.Namespace"/>和<see cref="P:AmazedSecurity.Permission.PermissionAttribute.PermissionName"/>属性来生成权限列表
            如果权限不存在，生成；否则查看该权限是否已标记为删除，是，则取消删除标记，否则，不做任何操作
            </summary>
        </member>
        <member name="M:AmazedSecurity.Permission.AutoGeneratePermission.AddAutoGeneratePermission(Microsoft.Extensions.DependencyInjection.IServiceCollection,AmazedSecurity.Permission.PermissionOperationAbstract,System.Reflection.Assembly[])">
            <summary>
            服务集合的扩展方法，用于自动生成权限列表
            </summary>
            <param name="services">服务集合</param>
            <param name="permissionOperation"></param>
            <param name="assemblies">程序集集合</param>
            <returns></returns>
        </member>
        <member name="M:AmazedSecurity.Permission.AutoGeneratePermission.GetControllers(System.Reflection.Assembly)">
            <summary>
            获取所有控制器类
            </summary>
            <param name="assembly">程序集</param>
        </member>
        <member name="M:AmazedSecurity.Permission.AutoGeneratePermission.GetControllerMethods(System.Type)">
            <summary>
            获取控制器中的所有方法
            </summary>
            <param name="controller">控制器类</param>
        </member>
        <member name="M:AmazedSecurity.Permission.AutoGeneratePermission.GetPermissionValidAttribute(System.Reflection.MethodInfo)">
            <summary>
            获取方法的所有<see cref="T:System.Attribute"/>特性
            </summary>
            <param name="method">函数方法</param>
        </member>
        <member name="M:AmazedSecurity.Permission.AutoGeneratePermission.CreateOrUpdatePermission(AmazedSecurity.Permission.PermissionAttribute)">
            <summary>
            创建或更新权限
            </summary>
            <param name="permissionValid">权限验证特性</param>
        </member>
        <member name="T:AmazedSecurity.Permission.IPermission">
            <summary>
            权限实体表必须继承的接口
            </summary>
        </member>
        <member name="P:AmazedSecurity.Permission.IPermission.PermissionName">
            <summary>
            权限名称，唯一
            </summary>
        </member>
        <member name="T:AmazedSecurity.Permission.PermissionAttribute">
            <summary>
            用户权限验证特性
            </summary>
        </member>
        <member name="P:AmazedSecurity.Permission.PermissionAttribute.Namespace">
            <summary>
            权限所属
            </summary>
        </member>
        <member name="P:AmazedSecurity.Permission.PermissionAttribute.PermissionName">
            <summary>
            权限名称
            </summary>
        </member>
        <member name="P:AmazedSecurity.Permission.PermissionAttribute.IsValid">
            <summary>
            是否验证成功
            </summary>
        </member>
        <member name="M:AmazedSecurity.Permission.PermissionAttribute.#ctor(System.String,System.String)">
            <summary>
            用户权限验证
            </summary>
            <param name="space">权限所属</param>
            <param name="permissionName">权限名称</param>
        </member>
        <member name="M:AmazedSecurity.Permission.PermissionAttribute.ValidUserPermission(System.String,System.String)">
            <summary>
            用户权限验证
            </summary>
            <param name="userId">用户ID</param>
            <param name="permissionName">权限名称</param>
            <returns></returns>
        </member>
        <member name="M:AmazedSecurity.Permission.PermissionAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            方法执行前验证权限，如不通过，则返回错误信息
            </summary>
            <param name="context">执行前上下文</param>
        </member>
        <member name="T:AmazedSecurity.Permission.PermissionOperationAbstract">
            <summary>
            权限表操作抽象类
            </summary>
        </member>
        <member name="M:AmazedSecurity.Permission.PermissionOperationAbstract.CreateOrUpdatePermission(System.String)">
            <summary>
            创建或更新权限表
            </summary>
            <param name="permissionName"></param>
        </member>
        <member name="T:AmazedSecurity.StringResource">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:AmazedSecurity.StringResource.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:AmazedSecurity.StringResource.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:AmazedSecurity.StringResource._2DFFD5DF_292D_4E3F_9CA2_0B238B2258E7">
            <summary>
              查找类似 entities的长度必须大于0 的本地化字符串。
            </summary>
        </member>
        <member name="P:AmazedSecurity.StringResource._47B50496_4949_443F_8D22_15D008056E32">
            <summary>
              查找类似 的值不能为空或长度不能小于等于0 的本地化字符串。
            </summary>
        </member>
    </members>
</doc>
